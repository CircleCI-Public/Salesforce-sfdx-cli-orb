description: >
  Authenticate with and configure the SFDX CLI after installation.
  This orb utilizes JWT-based authentication. You will need to create a connected app and provide a base64 encoded server key for authentication.
  Learn more: https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_auth_jwt_flow.htm
parameters:
  defaultusername:
    description: The username for an org that all commands run against by default.
    type: string
  defaultdevhubusername:
    description: The username of your Dev Hub org that the force:org:create command defaults to. Used as alias.
    default: "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}"
    type: string
  jwtKey:
    description: Environment variable containing the base64 encoded private server key.
    default: SFDX_JWT_KEY
    type: env_var_name
  consumerKey:
    description: "The consumner key of the connected app for salesforce. Stored as an environment variable"
    default: SFDX_CONSUMER_KEY
    type: env_var_name
  instanceUrl:
    description: The URL of the Salesforce instance that is hosting your org.
    default: ""
    type: string
  apiVersion:
    description: The API version for a specific project or all projects. Normally, the Salesforce CLI assumes that youâ€™re using the same version of the CLI as the Dev Hub org.
    default: ""
    type: string
  decryption_key:
    description: Enviornment variable name for server.key decryption key, if available.
    default: DECRYPTION_KEY
    type: env_var_name
  server_key:
    description: Path to encrypted server.key within the project, if available.
    default: ""
    type: string

steps:
  - when:
      condition:
        not: << parameters.server_key >>
      steps:
        - run:
            name: Check and install SFDC authentication key
            command: |
              if [ -z $<<parameters.jwtKey>> ]; then
                echo "Authentication requires a base64 encoded server key to be provided as an evironment variable. Please ensure the <<parameters.jwtKey>> env var has been set correctly."
                exit 1
              fi
              if [ -z $<<parameters.consumerKey>> ]; then
                echo "Authentication requires a consumer key to be present. Please ensure the <<parameters.consumerKey>> env var has been set correctly."
                exit 1
              fi
              echo Creating jwt key file.
              echo
              if [ -f ./server.key ]; then
                echo "It appears you may have commited your server.key file. For your safety please never commit secrets to your code repository. We instead recommend utilizing environment variables for this purpose. You may wish to invalidate and regenerate your server key."
                exit 1
              fi
              echo $<<parameters.jwtKey>> | base64 --decode --ignore-garbage > ./server.key

  - when:
      condition:
        and: [<< parameters.decryption_key >>, << parameters.server_key >>]
      steps:
        - run:
            name: Decrypt SFDC authentication key.
            command: |
              openssl enc -aes-256-cbc -md sha256 -salt -d -in << parameters.server_key >> -out server.key -K << parameters.decryption_key >> -pbkdf2

  - run:
      name: Authenticate with Salesforce
      command: |
        <<#parameters.instanceUrl>>sfdx force:config:set instanceUrl=<<parameters.instanceUrl>> --global<</parameters.instanceUrl>>
        sfdx force:auth:jwt:grant --clientid $<<parameters.consumerKey>> \
        --jwtkeyfile ./server.key --username <<parameters.defaultusername>> <<#parameters.instanceUrl>>--instanceurl <<parameters.instanceUrl>><</parameters.instanceUrl>> \
        --setdefaultdevhubusername --setalias <<parameters.defaultdevhubusername>>
        <<#parameters.apiVersion>>sfdx force:config:set apiVersion=<<parameters.apiVersion>><</parameters.apiVersion>>
